{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["body"],"id":"body","weight":1,"src":"body","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"root","n":1},"1":{"v":"\nThis is the root for your Dendron vault.\n\nIf you decide to publish your entire vault, it will be your landing page. You are free to customize any part of this page except the frontmatter at the top, between the `---`.\n","n":0.158}}},{"i":2,"$":{"0":{"v":"Tutorial","n":1},"1":{"v":"\nWelcome to Dendron! Dendron is a developer-focused knowledge base that helps you manage information using **flexible hierarchies**!\n\nYou are currently in the tutorial vault (a vault is the folder where your notes are stored). Feel free to edit this note and create new files as you go through the quickstart!\n\n## Create a Note\n\n1. Use `Ctrl+L` / `Cmd+L` to bring up the lookup prompt\n1. Type `dendron` and select `Create New`\n\n- > NOTE: After you press enter, Dendron will create and open the `dendron` note. Use `<CTRL>-<TAB>` to come back to this note\n\nYou just created your first note!\n\n- > NOTE: Notes in Dendron are just plain text markdown with some [frontmatter](https://wiki.dendron.so/notes/ffec2853-c0e0-4165-a368-339db12c8e4b) on the top. You can edit them in Dendron or using ~~vim~~ your favourite text editor.\n\n## Find a Note\n\n1. Use `Ctrl+L` / `Cmd+L` to bring up the lookup prompt again\n1. Type `dendron` and press `<ENTER>`\n\n- > TIP: you don't have to type out the entire query, press `<TAB>` to autocomplete\n\nYou just `looked up` a note!\n\n- > NOTE: in Dendron, you can find or create notes using the lookup prompt\n\n## Organize your Notes\n\n1. Bring up the lookup prompt again\n1. Type `tutorial.one`\n\nYou just created your first hierarchy!\n\n- > NOTE: hierarchies in Dendron are just `.` delimited files. This makes each note both a file and a folder and makes it easy to keep your notes organized\n\n- > TIP: You can use the [Dendron Tree View](https://wiki.dendron.so/notes/hur7r6gr3kqa56s2vme986j) to view your hierarchy. If it's not currently in focus, you can use `CTRL+SHIFT+P`/`CMD+SHIFT+P` to open the command prompt and type in `Dendron: focus on tree view` to make it appear\n\n## Create a link\n\n1. In the current note, type `[[` - this should trigger the autocomplete. You can type `one` to narrow it down to the note you just created and hit enter\n<!-- Enter '[[' below-->\n\n<!-- End space-->\n\nYou just created your first link!\n\n- > NOTE: the links with the `[[` are called wikilinks (because they were first popularized by Wikipedia)\n- > TIP: If you hover your mouse over the link, you can get a preview of the contents inside the note!\n\n## Navigate a link\n\n1. Move your text cursor over the link you just created. Hold down `<CTRL>+<ENTER>`/`<CMD>+<ENTER>`\n\n- > TIP: You can also use `CTRL+CLICK` or `CMD+CLICK` to navigate links via mouse\n\nYou just navigated the link!\n\n## Refactor a Note\n\n1. Open [[tutorial.one]], bring up the command prompt (`CTRL+SHIFT+P`/`CMD+SHIFT+P`) and type `Dendron: Rename Note`\n1. Replace `tutorial` with `my-note` and then press `<ENTER>`\n1. You just refactored the note!\n\n- > NOTE: when you rename a note, Dendron updates all links and references of the original note being renamed. Try switching back to [[tutorial]] to see the updated link!\n- > TIP: in addition to renaming one note at a time, dendron has [an entire collection](https://wiki.dendron.so/notes/srajljj10V2dl19nCSFiC) of refactoring commands that let you change headers, move around sections, and refactor entire hierarchies!\n\n## Conclusion\n\nCongrats, you finished the Dendron tutorial!\n\nWas there anything **unclear or buggy** about this tutorial? Please [**report it**](https://github.com/dendronhq/dendron/discussions/3266) so we can **make it better**!\n\n## Next Steps\n\nDepending on your needs, here are some common next steps:\n\n- I want to **start writing**: [Create a daily journal note](command:dendron.createDailyJournalNote) ([docs](https://wiki.dendron.so/notes/ogIUqY5VDCJP28G3cAJhd))\n\n- I want to **use templates**: Use the [Appy Template](https://wiki.dendron.so/notes/ftohqknticu6bw4cfmzskq6) command to apply [templates](https://wiki.dendron.so/notes/861cbdf8-102e-4633-9933-1f3d74df53d2) to existing notes\n\n- I want to do a **longer tutorial**: Check out our [5min tutorial to explore more of Dendron's functionality](https://wiki.dendron.so/notes/678c77d9-ef2c-4537-97b5-64556d6337f1/)\n\n- I want to **implement a particular workflow** (bullet journal, zettelkasten, etc): Check out community [workflow guides](https://wiki.dendron.so/notes/9313b845-d9bf-42c9-aad1-0da34794ce26)\n\n- I want to use Dendron for **tasks and todos**: See the [Getting Things Done (GTD), Bullet Journaling, and Other Task Management Workflows](https://wiki.dendron.so/notes/ordz7r99w1v099v14hrwgnp) for how the founder of Dendron uses it to manage his work.\n\n- I want to explore **advanced features**: See [next steps](https://wiki.dendron.so/notes/TflY5kn29HOLpp1pWT9tP) for longer walkthroughs and advanced functionality!\n\n- I want to start clean with a **new vault at a custom location**: Run [Dendron: Initialize Workspace](command:dendron.initWS) from the command prompt (or click this link) to start from a clean slate\n\n- I want to use Dendron as a **knowledge base for my team**: Read the [Dendron team setup](https://wiki.dendron.so/notes/98f6d928-3f61-49fb-9c9e-70c27d25f838) to get started\n\n> Coming from Obsidian? Click [here](command:dendron.importObsidianPod) to import your Obsidian notes (or any markdown notes) into Dendron to see how they look.\n\n## Community\n\nDendron is more that just a tool - we are also a community of individuals that are passionate about knowledge management. If you need help or want to connect with the community, join us in the [Discords](https://link.dendron.so/discord).\n\nYou can also:\n\n- Star us on [GitHub](https://github.com/dendronhq/dendron)\n- Follow us on [Twitter](https://twitter.com/dendronhq)\n- Subscribe to the [Dendron Newsletter](https://link.dendron.so/newsletter)\n","n":0.037}}},{"i":3,"$":{"0":{"v":"Software Development","n":0.707}}},{"i":4,"$":{"0":{"v":"System Design","n":0.707},"1":{"v":"\n\n> TODO: ADD BOOKS!!!\n\n## Videos\n\n[System Design](https://www.youtube.com/playlist?list=PLMCXHnjXnTnvo6alSjVkgxV-VH6EPyvoX)\n\n## Courses\n\n[Grokking the System Design Interview - Learn Interactively](https://www.educative.io/courses/grokking-the-system-design-interview)\n\n[Scalability & System Design for Developers - Learn Interactively](https://www.educative.io/path/scalability-system-design)\n\n[Grokking the System Design Interview - Learn Interactively](https://www.educative.io/courses/grokking-the-system-design-interview)\n\n[1. Bloom Filters - Grokking the Advanced System Design Interview](https://www.educative.io/courses/grokking-adv-system-design-intvw/g2NrQEKn463)\n\n[Grokking the Advanced System Design Interview - Learn Interactively](https://www.educative.io/courses/grokking-adv-system-design-intvw)\n\n## Questions\n\n[GitHub - jwasham/coding-interview-university: A complete computer science study plan to become a software engineer.](https://github.com/jwasham/coding-interview-university#system-design-scalability-data-handling)\n\n[GitHub - donnemartin/system-design-primer: Learn how to design large-scale systems. Prep for the system design interview. Includes Anki flashcards.](https://github.com/donnemartin/system-design-primer#cap-theorem)","n":0.114}}},{"i":5,"$":{"0":{"v":"Interview","n":1},"1":{"v":"\n# Coding interview\n\n## Passing the Interview\n\n[An Algorithm for Passing Programming Interviews - malisper.me](https://malisper.me/an-algorithm-for-passing-programming-interviews/)\n\n## Courses\n\n[InterviewBit](https://www.interviewbit.com/practice/)\n\n[Learn C++ from Scratch - Free Interactive Course](https://www.educative.io/courses/learn-cpp-from-scratch?utm_campaign=Email%20Marketing&utm_medium=email&_hsmi=168598836&_hsenc=p2ANqtz-8vWxDZmOOkutDBOsm_bV7-xHebMwivgOzs6d-42zd1gSVDRRkZvRJPT-fZoKvIOYO93npUdrw9qY5q88OFAFSNZX8u_g&utm_content=168598836&utm_source=hs_email)\n\n## Java\n\n[GitHub - iluwatar/java-design-patterns: Design patterns implemented in Java](https://github.com/iluwatar/java-design-patterns)\n\n[GitHub - TheAlgorithms/Java: All Algorithms implemented in Java](https://github.com/TheAlgorithms/Java)\n\n### Unsorted\n\n[Web Application and Software Architecture 101 - Learn Interactively](https://www.educative.io/courses/web-application-software-architecture-101?utm_campaign=Email%20Marketing&utm_medium=email&_hsmi=168598836&_hsenc=p2ANqtz-8rHQMf83aIvB6hCHnxzazTs8PGdgJD4fGbNsQwjVvjE3TAesjvJZ2Tc-8h0tXTMDX2HNybTa11As8w9Xx2eZKz6M4ZmA&utm_content=168598836&utm_source=hs_email)\n\n[Machine Learning System Design - Learn Interactively](https://www.educative.io/courses/machine-learning-system-design?utm_campaign=Email%20Marketing&utm_medium=email&_hsmi=168598836&_hsenc=p2ANqtz-_03a4Mr-Cbi2hU3W4V5kLLQ7pJBOwKr9KCO5XMVo5SG6ZztNgRp-eG0uYG9QYKVxyyE0oOS0sPousz3dWmWo0w5xtnJw&utm_content=168598836&utm_source=hs_email)\n\n[Become an Effective Software Engineering Manager - Learn Interactively](https://www.educative.io/courses/become-an-effective-engineering-manager?utm_campaign=Email%20Marketing&utm_medium=email&_hsmi=168598836&_hsenc=p2ANqtz-9KxugnpUbYV9YMWMFTfbzP3ftZ8RYfbyY98xmwT6eYQbbPn1DekL9uIqoxwXP862qVOEEv9hA1Zl7kCDCeTVvFJggHgg&utm_content=168598836&utm_source=hs_email)\n\n[Grokking the Coding Interview: Patterns for Coding Questions - Learn Interactively](https://www.educative.io/courses/grokking-the-coding-interview?utm_campaign=Email%20Marketing&utm_medium=email&_hsmi=168598836&_hsenc=p2ANqtz-8dcvoCGBNqQ_qMUn21Fc4sKAOcC2OXOP91XR_UsNj6Y-ZtEGocUxPGwL7kjKiTCCJjl0gDU9B6Ig9y6kW-xsb_7-aStA&utm_content=168598836&utm_source=hs_email)\n\n[Grokking the Behavioral Interview - Learn Interactively](https://www.educative.io/courses/grokking-the-behavioral-interview?utm_campaign=Email%20Marketing&utm_medium=email&_hsmi=168598836&_hsenc=p2ANqtz-8ZWgZlUUNl2u1MSHu1TbhhA-0TKcQBxFrc4VRIwgXdeCONT7NJh1314mVEjhh4EtaSSUJeo0wi1FZ7zz9r9bmdpShWIw&utm_content=168598836&utm_source=hs_email)\n\n[Building Enterprise Applications with Spring Boot - Learn Interactively](https://www.educative.io/courses/enterprise-applications-spring-boot?_hsenc=p2ANqtz-_SSqRqYIrk2b7nymrnkIRY7Pbw9IuzB4tzS-nsnYfA-7woNOvCkv8yRzBvXmUjPLOd1xBijkQ5yHTihH4kZZGtc6-fJg&_hsmi=167095974&utm_campaign=New%20Courses%20Weekly%20Announcement&utm_content=167095974&utm_medium=email&utm_source=hs_email)\n\n## Cheatsheets\n\n- When to use specific algos\n    \n    ```\n    If input array is sorted then\n        - Binary search\n        - Two pointers\n    \n    If asked for all permutations/subsets then\n        - Backtracking\n    \n    If given a tree then\n        - DFS\n        - BFS\n    \n    If given a graph then\n        - DFS\n        - BFS\n    \n    If given a linked list then\n        - Two pointers\n    \n    If recursion is banned then\n        - Stack\n    \n    If must solve in-place then\n        - Swap corresponding values\n        - Store one or more different values in the same pointer\n    \n    If asked for maximum/minumum subarray/subset/options then\n        - Dynamic programming\n    \n    If asked for top/least K items then\n        - Heap\n    \n    If asked for common strings then\n        - Map\n        - Trie\n    \n    Else\n        - Map/Set for O(1) time & O(n) space\n        - Sort input for O(nlogn) time and O(1) space\n    \n    ```\n    \n\n[This is my technical interview cheat sheet. Feel free to fork it or do whatever you want with it. PLEASE let me know if there are any errors or if anything crucial is missing. I will add more links soon.](https://gist.github.com/TSiege/cbb0507082bb18ff7e4b)\n\n## General algo\n\n[The Algorithms](https://the-algorithms.com/)\n\n[Data structures cheat sheet, for coding interviews and computer science classes | Interview Cake](https://www.interviewcake.com/data-structures-reference)\n\n[Know Thy Complexities!](https://www.bigocheatsheet.com/)\n\n[GitHub - Jacke/Tech-Interview-Cheat-Sheet: Studying for a tech interview sucks. Here's an open source cheat sheet to help](https://github.com/Jacke/Tech-Interview-Cheat-Sheet)\n\n[[PUBLIC] Java Syntax Notes.pdf](https://drive.google.com/file/d/1ao4ZA28zzBttDkuS6MLQI52gDs_CJZEm/view)\n\n[GitHub - OpenGenus/cosmos: World's largest Contributor driven code dataset | Join our Internship and enjoy 🌱 | Algorithms that run our universe | Your personal library of every algorithm and data structure code that you will ever encounter |](https://github.com/OpenGenus/cosmos)\n\n[Swift Algorithm Club: Graphs with Adjacency List](https://www.raywenderlich.com/773-swift-algorithm-club-graphs-with-adjacency-list)\n\n## Language specific resources\n\n### JS\n\n[Jacke/javascript-algorithms](https://github.com/Jacke/javascript-algorithms?organization=Jacke&organization=Jacke)\n\n[Jacke/javascript-questions](https://github.com/Jacke/javascript-questions)\n\n### Scala\n\n[Scala interview questions](https://pedrorijo.com/blog/scala-interview-questions/#9-what-is-unit)\n\n[HiredInTech's Training Camp for Coding Interviews](https://www.hiredintech.com/classrooms/algorithm-design/lesson/39)\n\n[Top 40 Data Structure Interview Questions and Answers (2021) - InterviewBit - InterviewBit](https://www.interviewbit.com/data-structure-interview-questions/)\n\n[AlgoDaily - An Executable Data Structures Cheat Sheet for Interviews - Introduction/Arrays](https://algodaily.com/lessons/an-executable-data-structures-cheat-sheet#binary-search-tree-10)\n\n[Top 10 algorithms in Interview Questions - GeeksforGeeks](https://www.geeksforgeeks.org/top-10-algorithms-in-interview-questions/)\n\n[GitHub - yangshun/lago: 📕 Data Structures and Algorithms library in TypeScript](https://github.com/yangshun/lago)\n\n[GitHub - kdn251/interviews: Everything you need to know to get the job.](https://github.com/kdn251/interviews)\n\n[When to use each Sorting Algorithm - GeeksforGeeks](https://www.geeksforgeeks.org/when-to-use-each-sorting-algorithms/)\n\n## Visualization\n\n[VisuAlgo - visualising data structures and algorithms through animation](https://visualgo.net/en)\n\n[Radix Sort](https://www.cs.usfca.edu/~galles/visualization/RadixSort.html)\n\n# Interview General\n\n## Behavioural interview\n\n[Using the Star technique to shine at job interviews: a how-to guide](https://www.theguardian.com/careers/careers-blog/star-technique-competency-based-interview)\n\n## UNSORTED\n\nhttps://github.com/yangshun/tech-interview-handbook\n\n[Learn Advanced Distributed Systems Design](https://particular.net/adsd)\n\n[CS5412: Topics in Cloud Computing (Spring 2021 focus: Using the Cloud to Create Smart IoT Systems).](https://www.cs.cornell.edu/courses/cs5412/2021sp/)\n\n[6.824 Schedule: Spring 2021](https://pdos.csail.mit.edu/6.824/schedule.html)\n\n[](https://www.udemy.com/course/master-the-coding-interview-big-tech-faang-interviews/)\n\n[GT - Refresher - Advanced OS | Udacity Free Courses](https://www.udacity.com/course/gt-refresher-advanced-os--ud098)","n":0.046}}},{"i":6,"$":{"0":{"v":"Data Structure","n":0.707},"1":{"v":"\n## Packing\n\n[The Lost Art of Structure Packing](http://www.catb.org/esr/structure-packing/)","n":0.378}}},{"i":7,"$":{"0":{"v":"Architecture","n":1},"1":{"v":"\n## Design Patterns\n\n### Javascript\n\n[Learning JavaScript Design Patterns](https://www.patterns.dev/posts/classic-design-patterns/#factorypatternjavascript)\n\n## Data Mesh\n\n[Data Mesh Architecture](https://www.datamesh-architecture.com/#why)\n\n[The Twelve-Factor App](https://12factor.net/)","n":0.277}}},{"i":8,"$":{"0":{"v":"Algorithms","n":1},"1":{"v":"\n# Abstract\n\n## Visualization\n\n[Visualizing Algorithms](https://bost.ocks.org/mike/algorithms/)","n":0.5}}},{"i":9,"$":{"0":{"v":"Leetcode","n":1},"1":{"v":"\n# Leetcode Picks\n\n[Explore - LeetCode](https://leetcode.com/explore/featured/card/top-interview-questions-easy/)\n\n[Explore - LeetCode](https://leetcode.com/explore/interview/card/coding-interview-strategy/)\n\n## CONSTANT LEARNING\n\n[Explore - LeetCode](https://leetcode.com/explore/learn/card/fun-with-arrays/)\n\n[Explore - LeetCode](https://leetcode.com/explore/featured/card/top-interview-questions-easy/)\n\n[Explore - LeetCode](https://leetcode.com/explore/interview/card/coding-interview-strategy/)\n\n[Explore - LeetCode](https://leetcode.com/explore/interview/card/top-interview-questions-medium/)\n\n[Explore - LeetCode](https://leetcode.com/explore/interview/card/top-interview-questions-medium/)\n\n[Explore - LeetCode](https://leetcode.com/explore/interview/card/top-interview-questions-easy/)\n\n[Explore - LeetCode](https://leetcode.com/explore/interview/card/top-interview-questions-medium/)\n\n[Explore - LeetCode](https://leetcode.com/explore/interview/card/top-interview-questions-hard/)\n\n## Concepts\n\n### Binary search\n\n[Explore - LeetCode](https://leetcode.com/explore/learn/card/binary-search/)\n\n## Challenges\n\n[GitHub - donnemartin/interactive-coding-challenges: 120+ interactive Python coding interview challenges (algorithms and data structures). Includes Anki flashcards.](https://github.com/donnemartin/interactive-coding-challenges#bit-manipulation)","n":0.147}}},{"i":10,"$":{"0":{"v":"Content","n":1},"1":{"v":"\n\nsome content\n\nreally cool\n\n\nawesome","n":0.577}}}]}
