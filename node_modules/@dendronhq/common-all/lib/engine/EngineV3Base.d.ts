import { DLogger } from "../DLogger";
import { FuseEngine } from "../fuse";
import { INoteStore } from "../store";
import { BulkResp, BulkWriteNotesOpts, EngineDeleteNoteResp, EngineDeleteOpts, EngineWriteOptsV2, FindNoteOpts, NoteChangeEntry, NoteProps, NotePropsMeta, QueryNotesOpts, ReducedDEngine, RenameNoteOpts, RenameNotePayload, RespV2, RespV3, WriteNoteResp } from "../types";
/**
 * Abstract base class that contains common logic between DendronEngineV3 and
 * DendronEngineV3Web
 */
export declare abstract class EngineV3Base implements ReducedDEngine {
    protected noteStore: INoteStore<string>;
    protected logger: DLogger;
    protected abstract fuseEngine: FuseEngine;
    constructor(noteStore: INoteStore<string>, logger: DLogger);
    /**
     * See {@link DEngine.getNote}
     */
    getNote(id: string): Promise<RespV3<NoteProps>>;
    /**
     * See {@link DEngine.findNotes}
     */
    findNotes(opts: FindNoteOpts): Promise<NoteProps[]>;
    /**
     * See {@link DEngine.findNotesMeta}
     */
    findNotesMeta(opts: FindNoteOpts): Promise<NotePropsMeta[]>;
    /**
     * See {@link DEngine.bulkWriteNotes}
     */
    bulkWriteNotes(opts: BulkWriteNotesOpts): Promise<Required<BulkResp<NoteChangeEntry[]>>>;
    /**
     * See {@link DEngine.deleteNote}
     */
    deleteNote(id: string, opts?: EngineDeleteOpts): Promise<EngineDeleteNoteResp>;
    queryNotes(opts: QueryNotesOpts): Promise<RespV2<NoteProps[]>>;
    /**
     * See {@link DEngine.renameNote}
     */
    abstract renameNote(opts: RenameNoteOpts): Promise<RespV2<RenameNotePayload>>;
    /**
     * See {@link DEngine.writeNote}
     */
    abstract writeNote(note: NoteProps, opts?: EngineWriteOptsV2): Promise<WriteNoteResp>;
    /**
     * Move children of old parent note to new parent
     * @return note change entries of modified children
     */
    protected updateChildrenWithNewParent(oldParent: NotePropsMeta, newParent: NotePropsMeta): Promise<NoteChangeEntry[]>;
    /**
     * Update note metadata store based on note change entries
     * @param changes entries to update
     * @returns
     */
    protected updateNoteMetadataStore(changes: NoteChangeEntry[]): Promise<RespV3<string>[]>;
}
